// Apply to all modules
allprojects {
  apply plugin: 'java'
  apply plugin: 'eclipse'

  group = 'com.github.drepic26.couponcodes'
  version = '3.0'
  project.ext.author = 'Drepic26'

  repositories {
    mavenCentral()
    maven {
        name 'Sponge maven repo'
        url 'http://repo.spongepowered.org/Sponge/maven'
    }
	maven {
      name 'Bukkit maven repo'
      url 'http://repo.bukkit.org/content/groups/public/'
    }
    maven {
      name 'vault-repo'
      url 'http://nexus.theyeticave.net/content/repositories/pub_releases'
    }
    maven{
      name 'Spigot maven repo'
      url 'https://hub.spigotmc.org/nexus/content/groups/public/'
    }
	maven {
      name 'Plugin Metrics'
      url 'http://repo.mcstats.org/content/repositories/public'
    }
  }
}

dependencies {
  compile project(':core')
  compile project(':mods:sponge')
  compile project(':mods:bukkit')
  compile project(':mods:granite')
}

project(':core') {
  def filteredSourceDir = file("${buildDir}/filtered")
  sourceSets {
    filtered {
        java {
            srcDirs = [filteredSourceDir]
        }
    }
  }
  compileJava.source = sourceSets.filtered.java
  task processVersion (type: Copy) {
    from sourceSets.main.java
    into filteredSourceDir
    expand(version: project.version)
  }
  compileJava.dependsOn processVersion
}

project(':mods:sponge') {
  dependencies {
    compile 'org.spongepowered:spongeapi:1.0'
    compile project(':core')
  }
}

project(':mods:bukkit') {
  dependencies {
    compile 'org.bukkit:bukkit:1.8-R0.1-SNAPSHOT'
    compile 'net.milkbowl.vault:VaultAPI:1.5'
    compile project(':core')
  }
  processResources {
    from(sourceSets.main.resources.srcDirs) {
      include 'plugin.yml'
      expand project.properties
    }
    from(sourceSets.main.resources.srcDirs) {
      exclude 'plugin.yml'
    }
  }
}

project(':mods:granite') {
  dependencies {
    compile 'org.granitemc:graniteapi:0.2.0-SNAPSHOT'
    compile project(':core')
  }
}

jar {
  from { project(":core").sourceSets.main.output }
  from { project(":mods:bukkit").sourceSets.main.output }
  from { project(":mods:sponge").sourceSets.main.output }
  from { project(":mods:granite").sourceSets.main.output }
}

task sourcesJar(type: Jar) {
  from project(":core").sourceSets.main.java
  from project(":mods:bukkit").sourceSets.main.java
  from project(":mods:sponge").sourceSets.main.java
  from project(":mods:granite").sourceSets.main.java
  classifier = "source"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  from javadoc.destinationDir
  classifier = "javadoc"
  dependsOn ":core:javadoc"
  dependsOn ":mods:bukkit:javadoc"
  dependsOn ":mods:sponge:javadoc"
  dependsOn ":mods:granite:javadoc"
}

javadoc {
  source = [
  project("core").sourceSets.main.java,
  project(":mods:bukkit").sourceSets.main.java,
  project(":mods:sponge").sourceSets.main.java,
  project(":mods:granite").sourceSets.main.java
  ]
}

artifacts {
  archives sourceJar
  archives javadocJar
}
